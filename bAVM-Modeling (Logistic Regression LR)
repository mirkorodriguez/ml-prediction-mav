{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPvzSQ/X0opg3jS7NyZO+Qz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Machine Learning approach to analyze 3-Year prognostication for patients with brain arteriovenous malformation (bAVM) after stereotactic radiosurgery (SRS): a study for a small and heterogeneous group in Peru.\n","\n","> [Python - sklearn]\n","---"],"metadata":{"id":"ox3kIF0HDaXH"}},{"cell_type":"markdown","source":["## Setup Environment"],"metadata":{"id":"tNtrnU09D3Qa"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ypRkVpt_7_6J","executionInfo":{"status":"ok","timestamp":1671590283102,"user_tz":300,"elapsed":7381,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"outputId":"07874a50-16b0-4033-e000-97417e5765a6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Scikit-learn version:  1.0.2\n","Python version:  3.8.16\n","Mounted at /content/drive\n"]}],"source":["# sklearn\n","import sklearn\n","print('Scikit-learn version: ', sklearn.__version__)\n","\n","# Python\n","import platform\n","print('Python version: ', platform.python_version())\n","\n","# Mount drive\n","from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"]},{"cell_type":"code","source":["%%bash \n","MYPROJECT=\"/content/drive/MyDrive/UNI/DSc/Publications/Mirko/Paper_Propuesta/Propuesta01/Modeling\"\n","ls -l \"$MYPROJECT\"\n","echo \"$MYPROJECT\" > config.txt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RaRwGyE5Dng6","executionInfo":{"status":"ok","timestamp":1671590283103,"user_tz":300,"elapsed":11,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"outputId":"ba09dbce-6046-481c-b119-695d2a7e1c8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total 2492\n","-rw------- 1 root root  670793 Dec 13 02:43 bAVM-Dataset Pre-Processing\n","-rw------- 1 root root 1096156 Dec 21 02:30 bAVM-Modeling (Decision Trees DT)\n","-rw------- 1 root root  410913 Dec 21 02:29 bAVM-Modeling (Logistic Regression LR)\n","-rw------- 1 root root  344685 Dec 21 00:35 bAVM-Modeling (Logistic Regression LR).bkp\n","drwx------ 2 root root    4096 Nov 30 15:23 bkp\n","drwx------ 2 root root    4096 Nov  2 22:23 dataset\n","drwx------ 2 root root    4096 Nov  3 00:41 model\n","drwx------ 2 root root    4096 Nov  3 01:51 output\n","-rw------- 1 root root    7429 Dec 20 22:28 Util.ipynb\n","drwx------ 2 root root    4096 Nov  3 00:41 utils\n"]}]},{"cell_type":"markdown","source":["### Libraries"],"metadata":{"id":"jKQtfGdoAnik"}},{"cell_type":"code","source":["!pip install import-ipynb"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Syeaut5uHuR7","executionInfo":{"status":"ok","timestamp":1671590289129,"user_tz":300,"elapsed":6031,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"outputId":"61f52a55-3cd9-4ff0-8725-575c8a9615dc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: import-ipynb in /usr/local/lib/python3.8/dist-packages (0.1.4)\n","Requirement already satisfied: nbformat in /usr/local/lib/python3.8/dist-packages (from import-ipynb) (5.7.0)\n","Requirement already satisfied: IPython in /usr/local/lib/python3.8/dist-packages (from import-ipynb) (7.9.0)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (0.7.5)\n","Requirement already satisfied: prompt-toolkit<2.1.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (2.0.10)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (2.6.1)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (0.2.0)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (4.8.0)\n","Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (5.7.1)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (57.4.0)\n","Requirement already satisfied: jedi>=0.10 in /usr/local/lib/python3.8/dist-packages (from IPython->import-ipynb) (0.18.2)\n","Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.8/dist-packages (from jedi>=0.10->IPython->import-ipynb) (0.8.3)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.8/dist-packages (from prompt-toolkit<2.1.0,>=2.0.0->IPython->import-ipynb) (1.15.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.8/dist-packages (from prompt-toolkit<2.1.0,>=2.0.0->IPython->import-ipynb) (0.2.5)\n","Requirement already satisfied: jupyter-core in /usr/local/lib/python3.8/dist-packages (from nbformat->import-ipynb) (5.1.0)\n","Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.8/dist-packages (from nbformat->import-ipynb) (4.3.3)\n","Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.8/dist-packages (from nbformat->import-ipynb) (2.16.2)\n","Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=2.6->nbformat->import-ipynb) (0.19.2)\n","Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=2.6->nbformat->import-ipynb) (22.1.0)\n","Requirement already satisfied: importlib-resources>=1.4.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema>=2.6->nbformat->import-ipynb) (5.10.1)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.8/dist-packages (from importlib-resources>=1.4.0->jsonschema>=2.6->nbformat->import-ipynb) (3.11.0)\n","Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.8/dist-packages (from jupyter-core->nbformat->import-ipynb) (2.6.0)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.8/dist-packages (from pexpect->IPython->import-ipynb) (0.7.0)\n"]}]},{"cell_type":"code","source":["# Libs\n","import math\n","import import_ipynb\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import joblib\n","\n","from datetime import datetime\n","\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import roc_auc_score\n","from sklearn.metrics import roc_curve\n","\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Function\n","from sklearn.linear_model import LogisticRegression"],"metadata":{"id":"dFRsS5DSAiAf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### General definitions:"],"metadata":{"id":"Ik0EKog7X4ib"}},{"cell_type":"code","source":["# Project & working folders\n","PROJECT_FOLDER = open('config.txt').readline().rstrip('\\n')\n","MODEL_FOLDER = \"/\".join([PROJECT_FOLDER,\"model\"])\n","OUTPUT_FOLDER = \"/\".join([PROJECT_FOLDER,\"output\"])\n","\n","%cd $PROJECT_FOLDER\n","%ls -l\n","from Util import trainAndGetBestModel, crossValidation, plot_roc_curve, getMetrics\n","\n","# Model name\n","MODEL_NAME = 'Logistic-Regression'\n","HYPER_PARAMS = {'penalty': ['l1', 'l2'],\n","                'solver': ['liblinear'],\n","                'C': [0.001,0.01,0.1,1,10,100,1000],\n","                'max_iter':[1000, 5000]}\n","\n","# Tunning model\n","N_FOLDS = 8 # VAL_SIZE = (100%/N_FOLDS)\n","\n","# Target\n","CLASS = 'curation'\n","\n","# Guarantee the same result\n","RANDOM_SEED = 0\n","\n","# Hyper parameter tunning\n","\n","METRIC='balanced_accuracy'\n","\n","# Report\n","FINAL_REPORT_METRICS = []\n","FINAL_REPORT_METRICS_TITLE = ['Model Name','Info','Accuracy', 'Sensitivity/Recall', 'Specificity', 'PPV', 'NPV','Balanced_accuracy','F1', 'AUC', 'TN', 'FP', 'FN', 'TP']\n","\n","# Others\n","DPI_DEFAULT = 400\n","DT_STRING = datetime.now().strftime(\"%Y%m%d%H%M%S\")\n","\n","print('Date time: ' + DT_STRING)"],"metadata":{"id":"A3SrGv1qG3VW","executionInfo":{"status":"ok","timestamp":1671590290555,"user_tz":300,"elapsed":93,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"38231dea-24b8-4649-e127-5eb4210f5ba5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/UNI/DSc/Publications/Mirko/Paper_Propuesta/Propuesta01/Modeling\n","total 2492\n","-rw------- 1 root root  670793 Dec 13 02:43 'bAVM-Dataset Pre-Processing'\n","-rw------- 1 root root 1096156 Dec 21 02:30 'bAVM-Modeling (Decision Trees DT)'\n","-rw------- 1 root root  410913 Dec 21 02:29 'bAVM-Modeling (Logistic Regression LR)'\n","-rw------- 1 root root  344685 Dec 21 00:35 'bAVM-Modeling (Logistic Regression LR).bkp'\n","drwx------ 2 root root    4096 Nov 30 15:23  \u001b[0m\u001b[01;34mbkp\u001b[0m/\n","drwx------ 2 root root    4096 Nov  2 22:23  \u001b[01;34mdataset\u001b[0m/\n","drwx------ 3 root root    4096 Nov  3 00:41  \u001b[01;34mmodel\u001b[0m/\n","drwx------ 2 root root    4096 Nov  3 01:51  \u001b[01;34moutput\u001b[0m/\n","-rw------- 1 root root    7429 Dec 20 22:28  Util.ipynb\n","drwx------ 2 root root    4096 Nov  3 00:41  \u001b[01;34mutils\u001b[0m/\n","importing Jupyter notebook from Util.ipynb\n","Date time: 20221221023812\n"]}]},{"cell_type":"markdown","source":["## **Part I: Loading Datasets:**"],"metadata":{"id":"UO-IVm9sGSs4"}},{"cell_type":"code","source":["# dataset\n","dataset_name_csv = 'training_set.csv'\n","dataset_full = pd.read_csv(\"/\".join([OUTPUT_FOLDER, dataset_name_csv]))\n","\n","# balanced dataset\n","bal_dataset_name_csv = 'training_set_bal.csv'\n","bal_dataset_full = pd.read_csv(\"/\".join([OUTPUT_FOLDER, bal_dataset_name_csv]))\n","bal_dataset_full.head()"],"metadata":{"id":"u1hX33on6xDt","executionInfo":{"status":"ok","timestamp":1671590290555,"user_tz":300,"elapsed":80,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/","height":300},"outputId":"780d9b37-5f3b-4cb8-c247-ff1d90ce576d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   gender   age  ocupation  haemorrhage  headache  seizures  encephalomalacia  \\\n","0     0.0  43.0        3.0          1.0       1.0       0.0               0.0   \n","1     1.0  25.0        2.0          1.0       1.0       1.0               0.0   \n","2     1.0  21.0        2.0          1.0       1.0       1.0               1.0   \n","3     1.0  29.0        4.0          1.0       1.0       0.0               1.0   \n","4     0.0  24.0        3.0          1.0       0.0       0.0               1.0   \n","\n","   other_diseases  deficit  karnofsky_scale  ...  type_venous_drainage  \\\n","0             0.0      1.0             60.0  ...                   2.0   \n","1             0.0      1.0             90.0  ...                   1.0   \n","2             0.0      1.0             90.0  ...                   3.0   \n","3             0.0      2.0             90.0  ...                   1.0   \n","4             0.0      4.0             90.0  ...                   2.0   \n","\n","   eloquence  blood_flow_velocity  venous_stenosis  volumen_avm  \\\n","0        1.0                  1.0              0.0        1.372   \n","1        1.0                  3.0              0.0        7.670   \n","2        1.0                  2.0              1.0        2.040   \n","3        0.0                  1.0              0.0        0.256   \n","4        0.0                  1.0              0.0        0.500   \n","\n","   num_radiosurgeries  num_isocenters  radiation_dosis  isodosis  curation  \n","0                 1.0             1.0             17.0      80.0       1.0  \n","1                 1.0             2.0             13.0      50.0       1.0  \n","2                 1.0             1.0             18.0      80.0       1.0  \n","3                 1.0             1.0             17.0      80.0       1.0  \n","4                 1.0             1.0             18.0      80.0       1.0  \n","\n","[5 rows x 33 columns]"],"text/html":["\n","  <div id=\"df-85fc8b87-de0d-4d85-bb76-0f3c3a5f582b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>ocupation</th>\n","      <th>haemorrhage</th>\n","      <th>headache</th>\n","      <th>seizures</th>\n","      <th>encephalomalacia</th>\n","      <th>other_diseases</th>\n","      <th>deficit</th>\n","      <th>karnofsky_scale</th>\n","      <th>...</th>\n","      <th>type_venous_drainage</th>\n","      <th>eloquence</th>\n","      <th>blood_flow_velocity</th>\n","      <th>venous_stenosis</th>\n","      <th>volumen_avm</th>\n","      <th>num_radiosurgeries</th>\n","      <th>num_isocenters</th>\n","      <th>radiation_dosis</th>\n","      <th>isodosis</th>\n","      <th>curation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>43.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>60.0</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.372</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>17.0</td>\n","      <td>80.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>25.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>7.670</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>13.0</td>\n","      <td>50.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>21.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>2.040</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>18.0</td>\n","      <td>80.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>29.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.256</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>17.0</td>\n","      <td>80.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>24.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.500</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>18.0</td>\n","      <td>80.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 33 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85fc8b87-de0d-4d85-bb76-0f3c3a5f582b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-85fc8b87-de0d-4d85-bb76-0f3c3a5f582b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-85fc8b87-de0d-4d85-bb76-0f3c3a5f582b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["### Getting X and Y:"],"metadata":{"id":"jbKMu6DL5V1x"}},{"cell_type":"code","source":["# Imbalanced\n","X_columns = dataset_full.columns[:-1]\n","# X,y\n","X = dataset_full[X_columns].astype('float32')\n","y = dataset_full[CLASS].astype('int32')"],"metadata":{"id":"Wp2om_eKfe4p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Balanced\n","X_columns_bal = bal_dataset_full.columns[:-1]\n","# X, y\n","X_bal = bal_dataset_full[X_columns_bal].astype('float32')\n","y_bal = bal_dataset_full[CLASS].astype('int32')"],"metadata":{"id":"ym4k8jXr6fjG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **Part II: Model Building**\n","---"],"metadata":{"id":"A7UjNTrL2p62"}},{"cell_type":"code","metadata":{"id":"7MFnbQr7wWM6","executionInfo":{"status":"ok","timestamp":1671590290557,"user_tz":300,"elapsed":79,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"86c68ced-8bc6-432c-fa38-87474980aa32"},"source":["print(\"Dependant variable y: shape\", y.shape)\n","print(\"Indedendant variables X: shape \", X.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dependant variable y: shape (151,)\n","Indedendant variables X: shape  (151, 32)\n"]}]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"ocvTbLfIsDzz","executionInfo":{"status":"ok","timestamp":1671590290558,"user_tz":300,"elapsed":76,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"outputId":"12d7250a-5405-47fd-9fa6-5a0c4c8d0d19"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     gender   age  ocupation  haemorrhage  headache  seizures  \\\n","0       0.0  43.0        3.0          1.0       1.0       0.0   \n","1       1.0  25.0        2.0          1.0       1.0       1.0   \n","2       1.0  21.0        2.0          1.0       1.0       1.0   \n","3       1.0  29.0        4.0          1.0       1.0       0.0   \n","4       0.0  24.0        3.0          1.0       0.0       0.0   \n","..      ...   ...        ...          ...       ...       ...   \n","146     1.0   5.0        6.0          1.0       1.0       0.0   \n","147     0.0  10.0        6.0          1.0       0.0       0.0   \n","148     1.0  19.0        5.0          1.0       1.0       1.0   \n","149     0.0  29.0        8.0          0.0       1.0       1.0   \n","150     1.0  18.0        7.0          0.0       1.0       1.0   \n","\n","     encephalomalacia  other_diseases  deficit  karnofsky_scale  ...  \\\n","0                 0.0             0.0      1.0             60.0  ...   \n","1                 0.0             0.0      1.0             90.0  ...   \n","2                 1.0             0.0      1.0             90.0  ...   \n","3                 1.0             0.0      2.0             90.0  ...   \n","4                 1.0             0.0      4.0             90.0  ...   \n","..                ...             ...      ...              ...  ...   \n","146               1.0             0.0      4.0             80.0  ...   \n","147               0.0             0.0      4.0             80.0  ...   \n","148               0.0             0.0      4.0            100.0  ...   \n","149               0.0             0.0      4.0             90.0  ...   \n","150               0.0             0.0      2.0             80.0  ...   \n","\n","     expansion_shape_avm  type_venous_drainage  eloquence  \\\n","0                    3.0                   2.0        1.0   \n","1                    2.0                   1.0        1.0   \n","2                    1.0                   3.0        1.0   \n","3                    2.0                   1.0        0.0   \n","4                    1.0                   2.0        0.0   \n","..                   ...                   ...        ...   \n","146                  2.0                   2.0        1.0   \n","147                  1.0                   2.0        1.0   \n","148                  3.0                   2.0        0.0   \n","149                  3.0                   2.0        1.0   \n","150                  1.0                   1.0        1.0   \n","\n","     blood_flow_velocity  venous_stenosis  volumen_avm  num_radiosurgeries  \\\n","0                    1.0              0.0        1.372                 1.0   \n","1                    3.0              0.0        7.670                 1.0   \n","2                    2.0              1.0        2.040                 1.0   \n","3                    1.0              0.0        0.256                 1.0   \n","4                    1.0              0.0        0.500                 1.0   \n","..                   ...              ...          ...                 ...   \n","146                  2.0              0.0        2.400                 1.0   \n","147                  3.0              1.0       17.900                 1.0   \n","148                  1.0              0.0        2.600                 1.0   \n","149                  2.0              1.0       12.000                 1.0   \n","150                  2.0              0.0        7.810                 1.0   \n","\n","     num_isocenters  radiation_dosis  isodosis  \n","0               1.0             17.0      80.0  \n","1               2.0             13.0      50.0  \n","2               1.0             18.0      80.0  \n","3               1.0             17.0      80.0  \n","4               1.0             18.0      80.0  \n","..              ...              ...       ...  \n","146             1.0             18.0      80.0  \n","147             2.0             15.0      50.0  \n","148             1.0             18.0      80.0  \n","149             1.0             18.0      80.0  \n","150             2.0             16.0      50.0  \n","\n","[151 rows x 32 columns]"],"text/html":["\n","  <div id=\"df-9f9baa61-fbce-42ee-b29e-3446c5f55999\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>ocupation</th>\n","      <th>haemorrhage</th>\n","      <th>headache</th>\n","      <th>seizures</th>\n","      <th>encephalomalacia</th>\n","      <th>other_diseases</th>\n","      <th>deficit</th>\n","      <th>karnofsky_scale</th>\n","      <th>...</th>\n","      <th>expansion_shape_avm</th>\n","      <th>type_venous_drainage</th>\n","      <th>eloquence</th>\n","      <th>blood_flow_velocity</th>\n","      <th>venous_stenosis</th>\n","      <th>volumen_avm</th>\n","      <th>num_radiosurgeries</th>\n","      <th>num_isocenters</th>\n","      <th>radiation_dosis</th>\n","      <th>isodosis</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>43.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>60.0</td>\n","      <td>...</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.372</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>17.0</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>25.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>7.670</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>13.0</td>\n","      <td>50.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>21.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>2.040</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>18.0</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>29.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.256</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>17.0</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>24.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.500</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>18.0</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>1.0</td>\n","      <td>5.0</td>\n","      <td>6.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>80.0</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>2.400</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>18.0</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>0.0</td>\n","      <td>10.0</td>\n","      <td>6.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>80.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>17.900</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>15.0</td>\n","      <td>50.0</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>1.0</td>\n","      <td>19.0</td>\n","      <td>5.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>100.0</td>\n","      <td>...</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>2.600</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>18.0</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>0.0</td>\n","      <td>29.0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>90.0</td>\n","      <td>...</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>12.000</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>18.0</td>\n","      <td>80.0</td>\n","    </tr>\n","    <tr>\n","      <th>150</th>\n","      <td>1.0</td>\n","      <td>18.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>80.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>7.810</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>16.0</td>\n","      <td>50.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>151 rows × 32 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f9baa61-fbce-42ee-b29e-3446c5f55999')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9f9baa61-fbce-42ee-b29e-3446c5f55999 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9f9baa61-fbce-42ee-b29e-3446c5f55999');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# MinMax scaler (StandardScaler: (x-min)/(max-min)))\n","scaler = MinMaxScaler()\n","X = pd.DataFrame(scaler.fit_transform(X.to_numpy()), columns=X_columns)\n","joblib.dump(scaler,\"/\".join([MODEL_FOLDER, \"obj\", \"scaler_\" + DT_STRING + \".ser\"]))\n","\n","bal_scaler = MinMaxScaler()\n","X_bal = pd.DataFrame(bal_scaler.fit_transform(X_bal.to_numpy()), columns=X_columns)\n","joblib.dump(bal_scaler,\"/\".join([MODEL_FOLDER, \"obj\", \"bal_scaler_\" + DT_STRING + \".ser\"]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XGnSerFMs9eb","executionInfo":{"status":"ok","timestamp":1671590290559,"user_tz":300,"elapsed":72,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"outputId":"703ad047-0282-4229-c589-6f68e1577779"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['/content/drive/MyDrive/UNI/DSc/Publications/Mirko/Paper_Propuesta/Propuesta01/Modeling/model/obj/bal_scaler_20221221023812.ser']"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"Ad43087osPDL","executionInfo":{"status":"ok","timestamp":1671590290559,"user_tz":300,"elapsed":68,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"outputId":"e10440e3-0488-49e3-9d1a-a079d13e780a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     gender       age  ocupation  haemorrhage  headache  seizures  \\\n","0       0.0  0.609375   0.285714          1.0       1.0       0.0   \n","1       1.0  0.328125   0.142857          1.0       1.0       1.0   \n","2       1.0  0.265625   0.142857          1.0       1.0       1.0   \n","3       1.0  0.390625   0.428571          1.0       1.0       0.0   \n","4       0.0  0.312500   0.285714          1.0       0.0       0.0   \n","..      ...       ...        ...          ...       ...       ...   \n","146     1.0  0.015625   0.714286          1.0       1.0       0.0   \n","147     0.0  0.093750   0.714286          1.0       0.0       0.0   \n","148     1.0  0.234375   0.571429          1.0       1.0       1.0   \n","149     0.0  0.390625   1.000000          0.0       1.0       1.0   \n","150     1.0  0.218750   0.857143          0.0       1.0       1.0   \n","\n","     encephalomalacia  other_diseases   deficit  karnofsky_scale  ...  \\\n","0                 0.0             0.0  0.000000         0.333333  ...   \n","1                 0.0             0.0  0.000000         0.833333  ...   \n","2                 1.0             0.0  0.000000         0.833333  ...   \n","3                 1.0             0.0  0.333333         0.833333  ...   \n","4                 1.0             0.0  1.000000         0.833333  ...   \n","..                ...             ...       ...              ...  ...   \n","146               1.0             0.0  1.000000         0.666667  ...   \n","147               0.0             0.0  1.000000         0.666667  ...   \n","148               0.0             0.0  1.000000         1.000000  ...   \n","149               0.0             0.0  1.000000         0.833333  ...   \n","150               0.0             0.0  0.333333         0.666667  ...   \n","\n","     expansion_shape_avm  type_venous_drainage  eloquence  \\\n","0                    1.0                   0.5        1.0   \n","1                    0.5                   0.0        1.0   \n","2                    0.0                   1.0        1.0   \n","3                    0.5                   0.0        0.0   \n","4                    0.0                   0.5        0.0   \n","..                   ...                   ...        ...   \n","146                  0.5                   0.5        1.0   \n","147                  0.0                   0.5        1.0   \n","148                  1.0                   0.5        0.0   \n","149                  1.0                   0.5        1.0   \n","150                  0.0                   0.0        1.0   \n","\n","     blood_flow_velocity  venous_stenosis  volumen_avm  num_radiosurgeries  \\\n","0                    0.0              0.0     0.021142                 0.0   \n","1                    1.0              0.0     0.122825                 0.0   \n","2                    0.5              1.0     0.031927                 0.0   \n","3                    0.0              0.0     0.003124                 0.0   \n","4                    0.0              0.0     0.007064                 0.0   \n","..                   ...              ...          ...                 ...   \n","146                  0.5              0.0     0.037740                 0.0   \n","147                  1.0              1.0     0.287992                 0.0   \n","148                  0.0              0.0     0.040969                 0.0   \n","149                  0.5              1.0     0.192735                 0.0   \n","150                  0.5              0.0     0.125086                 0.0   \n","\n","     num_isocenters  radiation_dosis  isodosis  \n","0          0.000000         0.233333      0.75  \n","1          0.333333         0.100000      0.00  \n","2          0.000000         0.266667      0.75  \n","3          0.000000         0.233333      0.75  \n","4          0.000000         0.266667      0.75  \n","..              ...              ...       ...  \n","146        0.000000         0.266667      0.75  \n","147        0.333333         0.166667      0.00  \n","148        0.000000         0.266667      0.75  \n","149        0.000000         0.266667      0.75  \n","150        0.333333         0.200000      0.00  \n","\n","[151 rows x 32 columns]"],"text/html":["\n","  <div id=\"df-1470cc65-98c0-4c31-9d11-02974c99a8a8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>gender</th>\n","      <th>age</th>\n","      <th>ocupation</th>\n","      <th>haemorrhage</th>\n","      <th>headache</th>\n","      <th>seizures</th>\n","      <th>encephalomalacia</th>\n","      <th>other_diseases</th>\n","      <th>deficit</th>\n","      <th>karnofsky_scale</th>\n","      <th>...</th>\n","      <th>expansion_shape_avm</th>\n","      <th>type_venous_drainage</th>\n","      <th>eloquence</th>\n","      <th>blood_flow_velocity</th>\n","      <th>venous_stenosis</th>\n","      <th>volumen_avm</th>\n","      <th>num_radiosurgeries</th>\n","      <th>num_isocenters</th>\n","      <th>radiation_dosis</th>\n","      <th>isodosis</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.609375</td>\n","      <td>0.285714</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.333333</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.021142</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.233333</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>0.328125</td>\n","      <td>0.142857</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.833333</td>\n","      <td>...</td>\n","      <td>0.5</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.122825</td>\n","      <td>0.0</td>\n","      <td>0.333333</td>\n","      <td>0.100000</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>0.265625</td>\n","      <td>0.142857</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.833333</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>1.0</td>\n","      <td>0.031927</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.266667</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>0.390625</td>\n","      <td>0.428571</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.333333</td>\n","      <td>0.833333</td>\n","      <td>...</td>\n","      <td>0.5</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.003124</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.233333</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.312500</td>\n","      <td>0.285714</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>0.833333</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.007064</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.266667</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>146</th>\n","      <td>1.0</td>\n","      <td>0.015625</td>\n","      <td>0.714286</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>0.666667</td>\n","      <td>...</td>\n","      <td>0.5</td>\n","      <td>0.5</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>0.0</td>\n","      <td>0.037740</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.266667</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>0.0</td>\n","      <td>0.093750</td>\n","      <td>0.714286</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>0.666667</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.287992</td>\n","      <td>0.0</td>\n","      <td>0.333333</td>\n","      <td>0.166667</td>\n","      <td>0.00</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>1.0</td>\n","      <td>0.234375</td>\n","      <td>0.571429</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.040969</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.266667</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>0.0</td>\n","      <td>0.390625</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.000000</td>\n","      <td>0.833333</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>1.0</td>\n","      <td>0.192735</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.266667</td>\n","      <td>0.75</td>\n","    </tr>\n","    <tr>\n","      <th>150</th>\n","      <td>1.0</td>\n","      <td>0.218750</td>\n","      <td>0.857143</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.333333</td>\n","      <td>0.666667</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>0.0</td>\n","      <td>0.125086</td>\n","      <td>0.0</td>\n","      <td>0.333333</td>\n","      <td>0.200000</td>\n","      <td>0.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>151 rows × 32 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1470cc65-98c0-4c31-9d11-02974c99a8a8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1470cc65-98c0-4c31-9d11-02974c99a8a8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1470cc65-98c0-4c31-9d11-02974c99a8a8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"HmOw_SSJADEW"},"source":["### Training models via K-folds + GridSearch:"]},{"cell_type":"code","source":["# Imbalanced data (X,y)\n","trainAndGetBestModel(LogisticRegression(class_weight='balanced'), X, y, False, METRIC, MODEL_NAME, HYPER_PARAMS, N_FOLDS, RANDOM_SEED, DT_STRING, MODEL_FOLDER)\n","\n","# Balanced data (X_bal,y_bal)\n","trainAndGetBestModel(LogisticRegression(), X_bal, y_bal, True, METRIC, MODEL_NAME, HYPER_PARAMS, N_FOLDS, RANDOM_SEED, DT_STRING, MODEL_FOLDER)"],"metadata":{"id":"zjGaYHOYHcks","executionInfo":{"status":"ok","timestamp":1671590348152,"user_tz":300,"elapsed":57659,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"0e1521af-f09c-424b-bb41-f3d99e183731"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Train via Cross-Validation and Grid-Search for (Logistic-Regression) with Scoring (balanced_accuracy): \n","\n","\n","\n","Fold k: 1\n","Training set size: 132\n","Validanting set size: 19\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.652930, std: 0.069890 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.652930, std: 0.069890 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.736607, std: 0.109142 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.736607, std: 0.109142 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.480769, std: 0.050880 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.772550, std: 0.122139 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.480769, std: 0.050880 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.772550, std: 0.122139 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.748741, std: 0.092473 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.737523, std: 0.100613 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.748741, std: 0.092473 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.737523, std: 0.100613 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.763164, std: 0.097717 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.737523, std: 0.107298 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.763164, std: 0.097717 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.737523, std: 0.107298 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.725275, std: 0.122364 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.732715, std: 0.091038 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.725275, std: 0.122364 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.732715, std: 0.091038 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.720810, std: 0.130858 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.720810, std: 0.130858 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.720810, std: 0.130858 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.720810, std: 0.130858 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.772550 for params {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=0.1, class_weight='balanced', max_iter=1000,\n","                   solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (78.95%)\n","Sensitivity/Recall:  (81.25%)\n","Specificity:         (66.67%)\n","PPV:                 (92.86%)\n","NPV:                 (40.00%)\n","Balanced Accuracy:   (73.96%)\n","F1 Score:            (86.67%)\n","\n","\n","Fold k: 2\n","Training set size: 132\n","Validanting set size: 19\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.600160, std: 0.090879 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.600160, std: 0.090879 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.715774, std: 0.127219 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.715774, std: 0.127219 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.480769, std: 0.050880 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.779647, std: 0.142434 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.480769, std: 0.050880 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.779647, std: 0.142434 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.777358, std: 0.159440 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.721612, std: 0.149721 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.772550, std: 0.160575 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.721612, std: 0.149721 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.713370, std: 0.166348 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.718979, std: 0.148048 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.713370, std: 0.166348 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.718979, std: 0.148048 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.722299, std: 0.159632 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.744277, std: 0.107781 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.722299, std: 0.159632 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.744277, std: 0.107781 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.728251, std: 0.107888 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.749084, std: 0.110055 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.728251, std: 0.107888 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.749084, std: 0.110055 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.779647 for params {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=0.1, class_weight='balanced', max_iter=1000,\n","                   solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (89.47%)\n","Sensitivity/Recall:  (93.75%)\n","Specificity:         (66.67%)\n","PPV:                 (93.75%)\n","NPV:                 (66.67%)\n","Balanced Accuracy:   (80.21%)\n","F1 Score:            (93.75%)\n","\n","\n","Fold k: 3\n","Training set size: 132\n","Validanting set size: 19\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.582074, std: 0.061529 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.582074, std: 0.061529 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.744849, std: 0.095367 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.744849, std: 0.095367 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.755495, std: 0.115747 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.755495, std: 0.115747 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.719780, std: 0.113944 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.771749, std: 0.126200 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.719780, std: 0.113944 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.771749, std: 0.126200 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.768429, std: 0.186724 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.789606, std: 0.148721 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.768429, std: 0.186724 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.789606, std: 0.148721 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.768429, std: 0.120692 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.784799, std: 0.137426 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.768429, std: 0.120692 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.784799, std: 0.137426 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.742788, std: 0.167220 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.768429, std: 0.120692 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.742788, std: 0.167220 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.768429, std: 0.120692 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.789606 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, class_weight='balanced', max_iter=1000,\n","                   solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (84.21%)\n","Sensitivity/Recall:  (93.75%)\n","Specificity:         (33.33%)\n","PPV:                 (88.24%)\n","NPV:                 (50.00%)\n","Balanced Accuracy:   (63.54%)\n","F1 Score:            (90.91%)\n","\n","\n","Fold k: 4\n","Training set size: 132\n","Validanting set size: 19\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.567880, std: 0.083475 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.567880, std: 0.083475 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.733974, std: 0.092010 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.733974, std: 0.092010 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.501603, std: 0.004240 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.769231, std: 0.134841 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.501603, std: 0.004240 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.769231, std: 0.134841 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.733745, std: 0.096180 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.763164, std: 0.127275 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.733745, std: 0.096180 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.763164, std: 0.127275 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.773924, std: 0.129332 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.692079, std: 0.122287 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.773924, std: 0.129332 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.692079, std: 0.122287 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.748283, std: 0.126919 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.757555, std: 0.108317 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.748283, std: 0.126919 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.757555, std: 0.108317 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.731914, std: 0.146651 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.757212, std: 0.128010 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.731914, std: 0.146651 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.757212, std: 0.128010 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.773924 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, class_weight='balanced', max_iter=1000, penalty='l1',\n","                   solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (84.21%)\n","Sensitivity/Recall:  (81.25%)\n","Specificity:         (100.00%)\n","PPV:                 (100.00%)\n","NPV:                 (50.00%)\n","Balanced Accuracy:   (90.62%)\n","F1 Score:            (89.66%)\n","\n","\n","Fold k: 5\n","Training set size: 132\n","Validanting set size: 19\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.567995, std: 0.061134 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.567995, std: 0.061134 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.667926, std: 0.113780 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.667926, std: 0.113780 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.737294, std: 0.140011 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.737294, std: 0.140011 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.724245, std: 0.169584 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.748741, std: 0.125712 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.724245, std: 0.169584 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.748741, std: 0.125712 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.738668, std: 0.103174 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.740957, std: 0.089138 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.738668, std: 0.103174 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.740957, std: 0.089138 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.713370, std: 0.112104 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.724588, std: 0.101512 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.713370, std: 0.112104 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.724588, std: 0.101512 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.729739, std: 0.103787 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.724588, std: 0.074142 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.729739, std: 0.103787 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.724588, std: 0.074142 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.748741 for params {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=1, class_weight='balanced', max_iter=1000,\n","                   solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (78.95%)\n","Sensitivity/Recall:  (81.25%)\n","Specificity:         (66.67%)\n","PPV:                 (92.86%)\n","NPV:                 (40.00%)\n","Balanced Accuracy:   (73.96%)\n","F1 Score:            (86.67%)\n","\n","\n","Fold k: 6\n","Training set size: 132\n","Validanting set size: 19\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.594437, std: 0.068818 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.594437, std: 0.068818 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.695284, std: 0.124557 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.695284, std: 0.124557 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.719322, std: 0.123186 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.719322, std: 0.123186 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.751603, std: 0.144012 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.735234, std: 0.135865 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.751603, std: 0.144012 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.735234, std: 0.135865 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.793613, std: 0.128857 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.739698, std: 0.134510 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.793613, std: 0.128857 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.739698, std: 0.134510 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.741529, std: 0.086010 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.728136, std: 0.112754 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.741529, std: 0.086010 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.728136, std: 0.112754 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.716232, std: 0.133475 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.732601, std: 0.109962 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.716232, std: 0.133475 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.732601, std: 0.109962 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.793613 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, class_weight='balanced', max_iter=1000, penalty='l1',\n","                   solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (73.68%)\n","Sensitivity/Recall:  (80.00%)\n","Specificity:         (50.00%)\n","PPV:                 (85.71%)\n","NPV:                 (40.00%)\n","Balanced Accuracy:   (65.00%)\n","F1 Score:            (82.76%)\n","\n","\n","Fold k: 7\n","Training set size: 132\n","Validanting set size: 19\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.575893, std: 0.054858 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.575893, std: 0.054858 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.761103, std: 0.099286 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.761103, std: 0.099286 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.806319, std: 0.123780 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.806319, std: 0.123780 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.851992, std: 0.159720 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.812614, std: 0.150601 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.851992, std: 0.159720 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.812614, std: 0.150601 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.762363, std: 0.144876 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.773924, std: 0.136269 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.762363, std: 0.144876 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.773924, std: 0.136269 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.721497, std: 0.190572 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.725962, std: 0.185665 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.721497, std: 0.190572 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.725962, std: 0.185665 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.700664, std: 0.207674 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.726305, std: 0.181290 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.705472, std: 0.204583 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.726305, std: 0.181290 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.851992 for params {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=1, class_weight='balanced', max_iter=1000, penalty='l1',\n","                   solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (68.42%)\n","Sensitivity/Recall:  (80.00%)\n","Specificity:         (25.00%)\n","PPV:                 (80.00%)\n","NPV:                 (25.00%)\n","Balanced Accuracy:   (52.50%)\n","F1 Score:            (80.00%)\n","\n","\n","Fold k: 8\n","Training set size: 133\n","Validanting set size: 18\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.615614, std: 0.141739 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.615614, std: 0.141739 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.736836, std: 0.103204 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.736836, std: 0.103204 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.800710, std: 0.104069 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.800710, std: 0.104069 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.788805, std: 0.110360 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.793613, std: 0.144920 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.788805, std: 0.110360 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.793613, std: 0.144920 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.811813, std: 0.130115 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.807005, std: 0.142637 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.811813, std: 0.130115 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.807005, std: 0.142637 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.811470, std: 0.106867 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.790980, std: 0.122895 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.811470, std: 0.106867 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.790980, std: 0.122895 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.801854, std: 0.118277 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.738897, std: 0.120628 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.801854, std: 0.118277 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.738897, std: 0.120628 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.811813 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, class_weight='balanced', max_iter=1000, penalty='l1',\n","                   solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (88.89%)\n","Sensitivity/Recall:  (93.33%)\n","Specificity:         (66.67%)\n","PPV:                 (93.33%)\n","NPV:                 (66.67%)\n","Balanced Accuracy:   (80.00%)\n","F1 Score:            (93.33%)\n","\n","Train via Cross-Validation and Grid-Search for (Logistic-Regression) with Scoring (balanced_accuracy): \n","\n","\n","\n","Fold k: 1\n","Training set size: 218\n","Validanting set size: 32\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.596497, std: 0.054209 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.596497, std: 0.054209 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.831044, std: 0.058665 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.831044, std: 0.058665 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.759615, std: 0.044127 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862294, std: 0.049095 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.759615, std: 0.044127 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862294, std: 0.049095 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.889423, std: 0.036258 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.054935 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.889423, std: 0.036258 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.054935 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.911745, std: 0.057781 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.053790 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.911745, std: 0.057781 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.053790 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884615, std: 0.086276 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.077988 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884615, std: 0.086276 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.077988 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.889423, std: 0.068168 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884615, std: 0.074796 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.889423, std: 0.068168 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884615, std: 0.074796 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.911745 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, max_iter=1000, penalty='l1', solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (87.50%)\n","Sensitivity/Recall:  (87.50%)\n","Specificity:         (87.50%)\n","PPV:                 (87.50%)\n","NPV:                 (87.50%)\n","Balanced Accuracy:   (87.50%)\n","F1 Score:            (87.50%)\n","\n","\n","Fold k: 2\n","Training set size: 218\n","Validanting set size: 32\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.583448, std: 0.056351 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.583448, std: 0.056351 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.821085, std: 0.075767 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.821085, std: 0.075767 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.750000, std: 0.031082 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862981, std: 0.069057 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.750000, std: 0.031082 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862981, std: 0.069057 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.876374, std: 0.081439 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.872253, std: 0.084252 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.876374, std: 0.081439 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.872253, std: 0.084252 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.885646, std: 0.078344 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862981, std: 0.090986 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.885646, std: 0.078344 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862981, std: 0.090986 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.843063, std: 0.087594 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.876030, std: 0.070758 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.843063, std: 0.087594 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.876030, std: 0.070758 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.843750, std: 0.099039 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.853022, std: 0.084932 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.848214, std: 0.092051 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.853022, std: 0.084932 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.885646 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, max_iter=1000, penalty='l1', solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (100.00%)\n","Sensitivity/Recall:  (100.00%)\n","Specificity:         (100.00%)\n","PPV:                 (100.00%)\n","NPV:                 (100.00%)\n","Balanced Accuracy:   (100.00%)\n","F1 Score:            (100.00%)\n","\n","\n","Fold k: 3\n","Training set size: 219\n","Validanting set size: 31\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.587225, std: 0.037107 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.587225, std: 0.037107 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.822115, std: 0.037107 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.822115, std: 0.037107 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.737294, std: 0.062556 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.867445, std: 0.072448 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.737294, std: 0.062556 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.867445, std: 0.072448 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.880838, std: 0.063810 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.890110, std: 0.080095 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.880838, std: 0.063810 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.890110, std: 0.080095 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.881181, std: 0.076748 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.899725, std: 0.076972 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.881181, std: 0.076748 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.899725, std: 0.076972 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.894574, std: 0.086363 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.890110, std: 0.081589 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.894574, std: 0.086363 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.890110, std: 0.081589 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.899382, std: 0.079373 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.899382, std: 0.088851 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.894918, std: 0.088167 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.899382, std: 0.088851 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.899725 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, max_iter=1000, solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (87.10%)\n","Sensitivity/Recall:  (87.50%)\n","Specificity:         (86.67%)\n","PPV:                 (87.50%)\n","NPV:                 (86.67%)\n","Balanced Accuracy:   (87.08%)\n","F1 Score:            (87.50%)\n","\n","\n","Fold k: 4\n","Training set size: 219\n","Validanting set size: 31\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.573489, std: 0.045532 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.573489, std: 0.045532 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.830357, std: 0.081494 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.830357, std: 0.081494 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.728365, std: 0.063580 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.853365, std: 0.051633 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.732830, std: 0.055674 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.853365, std: 0.051633 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.063253 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.875687, std: 0.054596 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.063253 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.875687, std: 0.054596 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.085402 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.890110, std: 0.083836 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.085402 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.890110, std: 0.083836 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.866415, std: 0.095770 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.866415, std: 0.083858 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.866415, std: 0.095770 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.866415, std: 0.083858 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.848214, std: 0.109372 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.861951, std: 0.093576 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.847871, std: 0.103851 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.861951, std: 0.093576 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.890110 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, max_iter=1000, solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (90.32%)\n","Sensitivity/Recall:  (87.50%)\n","Specificity:         (93.33%)\n","PPV:                 (93.33%)\n","NPV:                 (87.50%)\n","Balanced Accuracy:   (90.42%)\n","F1 Score:            (90.32%)\n","\n","\n","Fold k: 5\n","Training set size: 219\n","Validanting set size: 31\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.582761, std: 0.048960 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.582761, std: 0.048960 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.807692, std: 0.039883 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.807692, std: 0.039883 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.741415, std: 0.056192 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.876030, std: 0.075442 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.741415, std: 0.056192 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.876030, std: 0.075442 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.898695, std: 0.067117 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.084792 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.898695, std: 0.067117 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884959, std: 0.084792 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884615, std: 0.072269 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.894231, std: 0.078669 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.884615, std: 0.072269 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.894231, std: 0.078669 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.894231, std: 0.070257 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.898352, std: 0.067167 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.894231, std: 0.070257 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.898352, std: 0.067167 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.903503, std: 0.064698 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.903503, std: 0.067663 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.899038, std: 0.071121 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.903503, std: 0.067663 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.903503 for params {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=1000, max_iter=1000, penalty='l1', solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (87.10%)\n","Sensitivity/Recall:  (87.50%)\n","Specificity:         (86.67%)\n","PPV:                 (87.50%)\n","NPV:                 (86.67%)\n","Balanced Accuracy:   (87.08%)\n","F1 Score:            (87.50%)\n","\n","\n","Fold k: 6\n","Training set size: 219\n","Validanting set size: 31\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.604052, std: 0.031874 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.604052, std: 0.031874 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.835852, std: 0.051976 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.835852, std: 0.051976 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.762363, std: 0.082543 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.866758, std: 0.046744 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.762363, std: 0.082543 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.866758, std: 0.046744 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.881525, std: 0.091017 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.886332, std: 0.088243 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.881525, std: 0.091017 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.886332, std: 0.088243 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.877060, std: 0.080057 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.872253, std: 0.100030 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.881525, std: 0.079817 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.872253, std: 0.100030 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862294, std: 0.096833 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862981, std: 0.088206 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862294, std: 0.096833 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862981, std: 0.088206 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.858173, std: 0.084542 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.853709, std: 0.081598 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.858173, std: 0.084542 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.853709, std: 0.081598 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.886332 for params {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=1, max_iter=1000, solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (90.32%)\n","Sensitivity/Recall:  (80.00%)\n","Specificity:         (100.00%)\n","PPV:                 (100.00%)\n","NPV:                 (84.21%)\n","Balanced Accuracy:   (90.00%)\n","F1 Score:            (88.89%)\n","\n","\n","Fold k: 7\n","Training set size: 219\n","Validanting set size: 31\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.608860, std: 0.024454 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.608860, std: 0.024454 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.826923, std: 0.049374 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.826923, std: 0.049374 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.757212, std: 0.026097 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.863668, std: 0.073933 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.757212, std: 0.026097 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.863668, std: 0.073933 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.900069, std: 0.070964 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.886676, std: 0.071465 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.900069, std: 0.070964 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.886676, std: 0.071465 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.890453, std: 0.068522 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.872940, std: 0.088370 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.890453, std: 0.068522 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.872940, std: 0.088370 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862637, std: 0.091075 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.871909, std: 0.081565 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862637, std: 0.091075 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.871909, std: 0.081565 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.866758, std: 0.080811 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.871909, std: 0.082611 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.862294, std: 0.078362 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.871909, std: 0.082611 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.900069 for params {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=1, max_iter=1000, penalty='l1', solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (90.32%)\n","Sensitivity/Recall:  (86.67%)\n","Specificity:         (93.75%)\n","PPV:                 (92.86%)\n","NPV:                 (88.24%)\n","Balanced Accuracy:   (90.21%)\n","F1 Score:            (89.66%)\n","\n","\n","Fold k: 8\n","Training set size: 219\n","Validanting set size: 31\n","\n","Training Set: Looking for the best model ...\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.595467, std: 0.024982 --> {'C': 0.001, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.595467, std: 0.024982 --> {'C': 0.001, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.836882, std: 0.046194 --> {'C': 0.01, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.500000, std: 0.000000 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.836882, std: 0.046194 --> {'C': 0.01, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.740041, std: 0.058680 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.891140, std: 0.091229 --> {'C': 0.1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.740041, std: 0.058680 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.891140, std: 0.091229 --> {'C': 0.1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.913805, std: 0.050225 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.905220, std: 0.087114 --> {'C': 1, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.913805, std: 0.050225 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.905220, std: 0.087114 --> {'C': 1, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.914148, std: 0.058645 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.909341, std: 0.073319 --> {'C': 10, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.914148, std: 0.058645 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.909341, std: 0.073319 --> {'C': 10, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.909684, std: 0.046631 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.895948, std: 0.080230 --> {'C': 100, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.914148, std: 0.046516 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.895948, std: 0.080230 --> {'C': 100, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.905220, std: 0.052755 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.905220, std: 0.058488 --> {'C': 1000, 'max_iter': 1000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.900755, std: 0.048941 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\tbalanced_accuracy (train) | mean: 0.905220, std: 0.058488 --> {'C': 1000, 'max_iter': 5000, 'penalty': 'l2', 'solver': 'liblinear'}\n","\t> Best balanced_accuracy: 0.914148 for params {'C': 10, 'max_iter': 1000, 'penalty': 'l1', 'solver': 'liblinear'}\n","\t> Best model: LogisticRegression(C=10, max_iter=1000, penalty='l1', solver='liblinear')\n","\n","Validating Set: Making Predictions ...\n","Accuracy:            (87.10%)\n","Sensitivity/Recall:  (93.33%)\n","Specificity:         (81.25%)\n","PPV:                 (82.35%)\n","NPV:                 (92.86%)\n","Balanced Accuracy:   (87.29%)\n","F1 Score:            (87.50%)\n"]}]},{"cell_type":"markdown","metadata":{"id":"55Bc0nU7hAzL"},"source":["### Cross-Validation (ALL training data):"]},{"cell_type":"code","source":["# Imbalanced\n","best_model = crossValidation(X, y, False, 'accuracy', MODEL_NAME, N_FOLDS, DT_STRING, MODEL_FOLDER)\n","# Balanced\n","bal_best_model = crossValidation(X_bal, y_bal, True, 'accuracy', MODEL_NAME, N_FOLDS, DT_STRING, MODEL_FOLDER)"],"metadata":{"id":"cp_GD92AHknG","executionInfo":{"status":"ok","timestamp":1671590351558,"user_tz":300,"elapsed":3415,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6181df56-1ac8-4566-ed4a-9c3074da926e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Cross-Validation for (Logistic-Regression) with Scoring (accuracy): \n","\n","  ModelID                                    ModelName      Mean  Variance\n","0       1  Logistic-Regression_1_20221221023812.joblib  0.794591  0.096643\n","1       2  Logistic-Regression_2_20221221023812.joblib  0.794591  0.096643\n","2       3  Logistic-Regression_3_20221221023812.joblib  0.827120  0.099409\n","3       4  Logistic-Regression_4_20221221023812.joblib  0.840643  0.075558\n","4       5  Logistic-Regression_5_20221221023812.joblib  0.813962  0.092856\n","5       6  Logistic-Regression_6_20221221023812.joblib  0.840643  0.075558\n","6       7  Logistic-Regression_7_20221221023812.joblib  0.820541  0.112952\n","7       8  Logistic-Regression_8_20221221023812.joblib  0.840643  0.075558\n","\n","Best model:  Logistic-Regression_4_20221221023812.joblib\n","\n","Cross-Validation for (Logistic-Regression) with Scoring (accuracy): \n","\n","  ModelID                                        ModelName      Mean  Variance\n","0       1  bal_Logistic-Regression_1_20221221023812.joblib  0.896799  0.065408\n","1       2  bal_Logistic-Regression_2_20221221023812.joblib  0.892767  0.063875\n","2       3  bal_Logistic-Regression_3_20221221023812.joblib  0.885081  0.089150\n","3       4  bal_Logistic-Regression_4_20221221023812.joblib  0.885081  0.089150\n","4       5  bal_Logistic-Regression_5_20221221023812.joblib  0.868826  0.080453\n","5       6  bal_Logistic-Regression_6_20221221023812.joblib  0.888861  0.069267\n","6       7  bal_Logistic-Regression_7_20221221023812.joblib  0.896799  0.072710\n","7       8  bal_Logistic-Regression_8_20221221023812.joblib  0.896799  0.065408\n","\n","Best model:  bal_Logistic-Regression_1_20221221023812.joblib\n"]}]},{"cell_type":"markdown","source":["## **Part III: Model Validation (TRAIN)**\n","---"],"metadata":{"id":"O6JQFJeNJ1EI"}},{"cell_type":"markdown","source":["### Loading models:"],"metadata":{"id":"mj9dkpDkvM_K"}},{"cell_type":"code","source":["# Imbalanced model\n","model_to_load = \"/\".join([MODEL_FOLDER, 'cv', best_model['ModelName'].values[0]])\n","print('Loading Model : %s' % model_to_load.split('/')[-1])\n","model = joblib.load(model_to_load)\n","y_pred = model.predict(X)\n","y_proba = model.predict_proba(X)[:,1]\n","\n","# Balanced model\n","model_to_load_bal = \"/\".join([MODEL_FOLDER, 'cv', bal_best_model['ModelName'].values[0]])\n","print('Loading Model : %s' % model_to_load_bal.split('/')[-1])\n","model_bal = joblib.load(model_to_load_bal)\n","y_pred_bal = model_bal.predict(X_bal)\n","y_proba_bal = model_bal.predict_proba(X_bal)[:,1]"],"metadata":{"id":"jEyBQGzxuY7p","executionInfo":{"status":"ok","timestamp":1671590351559,"user_tz":300,"elapsed":15,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a1a5b56a-aa08-48b2-886f-8f41fbcf3ef9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Loading Model : Logistic-Regression_4_20221221023812.joblib\n","Loading Model : bal_Logistic-Regression_1_20221221023812.joblib\n"]}]},{"cell_type":"code","source":["# Confusion Matrix\n","plt.rcParams.update({'font.size': 20})\n","\n","f, axes = plt.subplots(1, 2, figsize=(12, 8), sharey='row')\n","cm = confusion_matrix(y, y_pred)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)\n","disp.plot(ax=axes[0], xticks_rotation=45, cmap=\"Blues\", colorbar=False)\n","disp.ax_.set_title('Imbalanced')\n","\n","cm_bal = confusion_matrix(y_bal, y_pred_bal)\n","disp_bal = ConfusionMatrixDisplay(confusion_matrix=cm_bal, display_labels=model_bal.classes_)\n","disp_bal.plot(ax=axes[1], xticks_rotation=45, cmap=\"Blues\", colorbar=False)\n","disp_bal.ax_.set_title('Balanced')\n","\n","f.text(0.5, 0.9, MODEL_NAME, ha='center')\n","plt.savefig(\"/\".join([OUTPUT_FOLDER,'graphs',MODEL_NAME + '_ConfusionMatrix-TRAIN_%s.jpg' % DT_STRING]), dpi=DPI_DEFAULT)\n","plt.show()\n","\n","\n","# Classification \n","print('\\nClassification Report %s (Imbalanced):' % MODEL_NAME)\n","print(classification_report(y, y_pred))\n","print('\\nClassification Report %s (Balanced):' % MODEL_NAME)\n","print(classification_report(y_bal, y_pred_bal))\n","\n","# Metrics\n","print('\\nMetrics %s (Imbalanced):' % MODEL_NAME)\n","metrics = getMetrics(cm, MODEL_NAME + ' Imbalanced', 'TRAIN')\n","auc = round(roc_auc_score(y, y_proba), 4)\n","metrics = [str(auc) if item == 'AUC' else item for item in metrics]\n","FINAL_REPORT_METRICS.append(metrics)\n","\n","print('\\nMetrics %s (Balanced):' % MODEL_NAME)\n","metrics_bal = getMetrics(cm_bal, MODEL_NAME + ' Balanced', 'TRAIN')\n","auc_bal = round(roc_auc_score(y_bal, y_proba_bal), 4)\n","metrics_bal = [str(auc_bal) if item == 'AUC' else item for item in metrics_bal]\n","FINAL_REPORT_METRICS.append(metrics_bal)\n","\n","# Ploting ROC Curve\n","print('\\nROC Curve:')\n","plt_1 = plt.figure(figsize=(12, 8))\n","plt.rcParams.update({'font.size': 15})\n","\n","fpr, tpr, thresholds = roc_curve(y, y_proba)\n","plt.plot(fpr,tpr,'-o', label=MODEL_NAME + ' Imbalanced ' + \" (auc=%.4f)\"  % (auc))\n","\n","fpr_bal, tpr_bal, thresholds_bal = roc_curve(y_bal, y_proba_bal)\n","plt.plot(fpr_bal,tpr_bal,'-o', label=MODEL_NAME + ' Balanced ' + \" (auc=%.4f)\"  % (auc_bal))\n","\n","plt.title(\"Receiving Operating Characteristic\")\n","plt.xlabel(\"False Positive Rate\")\n","plt.ylabel(\"True Positive Rate\")\n","plt.plot([0,1], 'r--')\n","plt.legend()\n","plt.savefig(\"/\".join([OUTPUT_FOLDER,'graphs',MODEL_NAME + '_ROC-TRAIN_%s.jpg' % DT_STRING]), dpi=DPI_DEFAULT)\n","\n","# print('\\nROC Curve:')\n","# plot_roc_curve(fpr, tpr, roc_auc_score(y, y_proba), MODEL_NAME)\n","# plot_roc_curve(fpr_bal, tpr_bal, roc_auc_score(y_bal, y_proba_bal), MODEL_NAME)"],"metadata":{"id":"akv0SuA_3GHQ","executionInfo":{"status":"ok","timestamp":1671590354399,"user_tz":300,"elapsed":2847,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"a1df4dcb-62e1-4889-b65a-4c9dd48e03a5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","Classification Report Logistic-Regression (Imbalanced):\n","              precision    recall  f1-score   support\n","\n","           0       0.84      1.00      0.91        26\n","           1       1.00      0.96      0.98       125\n","\n","    accuracy                           0.97       151\n","   macro avg       0.92      0.98      0.95       151\n","weighted avg       0.97      0.97      0.97       151\n","\n","\n","Classification Report Logistic-Regression (Balanced):\n","              precision    recall  f1-score   support\n","\n","           0       0.97      0.96      0.96       125\n","           1       0.96      0.97      0.96       125\n","\n","    accuracy                           0.96       250\n","   macro avg       0.96      0.96      0.96       250\n","weighted avg       0.96      0.96      0.96       250\n","\n","\n","Metrics Logistic-Regression (Imbalanced):\n","Accuracy:            (96.69%)\n","Sensitivity/Recall:  (96.00%)\n","Specificity:         (100.00%)\n","PPV:                 (100.00%)\n","NPV:                 (83.87%)\n","Balanced Accuracy:   (98.00%)\n","F1 Score:            (97.96%)\n","\n","Metrics Logistic-Regression (Balanced):\n","Accuracy:            (96.40%)\n","Sensitivity/Recall:  (96.80%)\n","Specificity:         (96.00%)\n","PPV:                 (96.03%)\n","NPV:                 (96.77%)\n","Balanced Accuracy:   (96.40%)\n","F1 Score:            (96.41%)\n","\n","ROC Curve:\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## **Part IV: Model Evaluation (TEST - real data)**\n","---"],"metadata":{"id":"3i6H65vbdFnC"}},{"cell_type":"markdown","source":["### Getting X and Y (TEST):"],"metadata":{"id":"tOtRE3znqe6L"}},{"cell_type":"code","metadata":{"id":"gm04UuOhklGd","executionInfo":{"status":"ok","timestamp":1671590354400,"user_tz":300,"elapsed":9,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6cc68c95-4577-40de-b125-9525f14cc24d"},"source":["# load test data\n","test_data_name_csv = 'test_set.csv';\n","test_data = pd.read_csv(\"/\".join([PROJECT_FOLDER, 'output', test_data_name_csv]))\n","\n","# Y\n","Y_TEST = test_data[CLASS].astype('int32')\n","\n","# X\n","X_COLUMNS = test_data.columns[:-1]\n","X_TEST_ORIG = test_data[X_COLUMNS].astype('float32')\n","\n","print(\"Test data: shape \",test_data.shape)\n","print(\"Dependant variable y: shape\", Y_TEST.shape)\n","print(\"Indedendant variables X: shape \", X_TEST_ORIG.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Test data: shape  (51, 33)\n","Dependant variable y: shape (51,)\n","Indedendant variables X: shape  (51, 32)\n"]}]},{"cell_type":"markdown","source":["### Loading models:"],"metadata":{"id":"dcEkvz0HvIyt"}},{"cell_type":"code","source":["# Imbalanced model\n","model_to_load = \"/\".join([MODEL_FOLDER, 'cv', best_model['ModelName'].values[0]])\n","print('Loading Model : %s' % model_to_load.split('/')[-1])\n","model = joblib.load(model_to_load)\n","the_scaler = joblib.load(\"/\".join([MODEL_FOLDER, \"obj\", \"scaler_\" + DT_STRING + \".ser\"]))\n","X_TEST = the_scaler.transform(X_TEST_ORIG).astype('float32')\n","Y_TEST_pred = model.predict(X_TEST)\n","Y_TEST_proba = model.predict_proba(X_TEST)[:,1]\n","\n","# Balanced model\n","model_to_load_bal = \"/\".join([MODEL_FOLDER, 'cv', bal_best_model['ModelName'].values[0]])\n","print('Loading Model : %s' % model_to_load_bal.split('/')[-1])\n","model_bal = joblib.load(model_to_load_bal)\n","the_bal_scaler = joblib.load(\"/\".join([MODEL_FOLDER, \"obj\", \"bal_scaler_\" + DT_STRING + \".ser\"]))\n","X_TEST_BAL = the_bal_scaler.transform(X_TEST_ORIG).astype('float32')\n","Y_TEST_pred_bal = model_bal.predict(X_TEST_BAL)\n","Y_TEST_proba_bal = model_bal.predict_proba(X_TEST_BAL)[:,1]"],"metadata":{"id":"TNToJtzWuk_O","executionInfo":{"status":"ok","timestamp":1671590354400,"user_tz":300,"elapsed":7,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"faf3e467-9b97-45f5-fc32-baeb28df330b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Loading Model : Logistic-Regression_4_20221221023812.joblib\n","Loading Model : bal_Logistic-Regression_1_20221221023812.joblib\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/base.py:443: UserWarning: X has feature names, but MinMaxScaler was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.8/dist-packages/sklearn/base.py:443: UserWarning: X has feature names, but MinMaxScaler was fitted without feature names\n","  warnings.warn(\n","/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Confusion Matrix\n","plt.rcParams.update({'font.size': 20})\n","f, axes = plt.subplots(1, 2, figsize=(12, 8), sharey='row')\n","CM = confusion_matrix(Y_TEST, Y_TEST_pred)\n","disp = ConfusionMatrixDisplay(confusion_matrix=CM, display_labels=model.classes_)\n","disp.plot(ax=axes[0], xticks_rotation=45, cmap=\"Blues\", colorbar=False)\n","disp.ax_.set_title('Imbalanced Model')\n","\n","CM_bal = confusion_matrix(Y_TEST, Y_TEST_pred_bal)\n","disp_bal = ConfusionMatrixDisplay(confusion_matrix=CM_bal, display_labels=model_bal.classes_)\n","disp_bal.plot(ax=axes[1], xticks_rotation=45, cmap=\"Blues\", colorbar=False)\n","disp_bal.ax_.set_title('Balanced Model')\n","\n","f.text(0.5, 0.9, MODEL_NAME, ha='center')\n","plt.savefig(\"/\".join([OUTPUT_FOLDER,'graphs',MODEL_NAME + '_ConfusionMatrix-TEST_%s.jpg' % DT_STRING]), dpi=DPI_DEFAULT)\n","plt.show()\n","\n","\n","# Classification \n","print('\\nClassification Report %s (Imbalanced):' % MODEL_NAME)\n","print(classification_report(Y_TEST, Y_TEST_pred))\n","print('\\nClassification Report %s (Balanced):' % MODEL_NAME)\n","print(classification_report(Y_TEST, Y_TEST_pred_bal))\n","\n","# Metrics\n","print('\\nMetrics %s (Imbalanced):' % MODEL_NAME)\n","metrics = getMetrics(CM, MODEL_NAME + ' Imbalanced', 'TEST')\n","AUC = round(roc_auc_score(Y_TEST, Y_TEST_proba), 4)\n","metrics = [str(AUC) if item == 'AUC' else item for item in metrics]\n","FINAL_REPORT_METRICS.append(metrics)\n","\n","print('\\nMetrics %s (Balanced):' % MODEL_NAME)\n","metrics_bal = getMetrics(CM_bal, MODEL_NAME + ' Balanced ', 'TEST')\n","AUC_bal = round(roc_auc_score(Y_TEST, Y_TEST_proba_bal), 4)\n","metrics_bal = [str(AUC_bal) if item == 'AUC' else item for item in metrics_bal]\n","FINAL_REPORT_METRICS.append(metrics_bal)\n","\n","# Ploting ROC Curve\n","print('\\nROC Curve:')\n","plt_1 = plt.figure(figsize=(12, 8))\n","plt.rcParams.update({'font.size': 15})\n","\n","\n","fpr, tpr, thresholds = roc_curve(Y_TEST, Y_TEST_proba)\n","plt.plot(fpr,tpr,'-o', label=MODEL_NAME + ' Imbalanced ' + \" (auc=%.4f)\"  % (AUC))\n","\n","fpr_bal, tpr_bal, thresholds_bal = roc_curve(Y_TEST, Y_TEST_proba_bal)\n","plt.plot(fpr_bal,tpr_bal,'-o', label=MODEL_NAME + ' Balanced ' + \" (auc=%.4f)\"  % (AUC_bal))\n","\n","plt.title(\"Receiving Operating Characteristic\")\n","plt.xlabel(\"False Positive Rate\")\n","plt.ylabel(\"True Positive Rate\")\n","plt.plot([0,1], 'r--')\n","plt.legend()\n","plt.savefig(\"/\".join([OUTPUT_FOLDER,'graphs',MODEL_NAME + '_ROC-TEST_%s.jpg' % DT_STRING]), dpi=DPI_DEFAULT)\n","# print('\\nROC Curve:')\n","# plot_roc_curve(fpr, tpr, roc_auc_score(Y_TEST, Y_TEST_proba), MODEL_NAME)\n","# plot_roc_curve(fpr_bal, tpr_bal, roc_auc_score(Y_TEST, Y_TEST_proba_bal), MODEL_NAME)"],"metadata":{"id":"iYrfHoB3VvEk","executionInfo":{"status":"ok","timestamp":1671590358576,"user_tz":300,"elapsed":4180,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"77d7b464-27ff-4730-e28f-0fc7fc402b91"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","Classification Report Logistic-Regression (Imbalanced):\n","              precision    recall  f1-score   support\n","\n","           0       0.54      0.78      0.64         9\n","           1       0.95      0.86      0.90        42\n","\n","    accuracy                           0.84        51\n","   macro avg       0.74      0.82      0.77        51\n","weighted avg       0.88      0.84      0.85        51\n","\n","\n","Classification Report Logistic-Regression (Balanced):\n","              precision    recall  f1-score   support\n","\n","           0       0.73      0.89      0.80         9\n","           1       0.97      0.93      0.95        42\n","\n","    accuracy                           0.92        51\n","   macro avg       0.85      0.91      0.88        51\n","weighted avg       0.93      0.92      0.92        51\n","\n","\n","Metrics Logistic-Regression (Imbalanced):\n","Accuracy:            (84.31%)\n","Sensitivity/Recall:  (85.71%)\n","Specificity:         (77.78%)\n","PPV:                 (94.74%)\n","NPV:                 (53.85%)\n","Balanced Accuracy:   (81.75%)\n","F1 Score:            (90.00%)\n","\n","Metrics Logistic-Regression (Balanced):\n","Accuracy:            (92.16%)\n","Sensitivity/Recall:  (92.86%)\n","Specificity:         (88.89%)\n","PPV:                 (97.50%)\n","NPV:                 (72.73%)\n","Balanced Accuracy:   (90.87%)\n","F1 Score:            (95.12%)\n","\n","ROC Curve:\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 864x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## **Part V: Model Interpretation**\n","---"],"metadata":{"id":"mR2E9KltZOYT"}},{"cell_type":"code","source":["print('\\nImbalanced Model')\n","print('----------------')\n","w = model.coef_[0]\n","feature_importance = pd.DataFrame(X.columns, columns = [\"Feature\"])\n","feature_importance[\"Coef\"] = w\n","feature_importance[\"Importance\"] = pow(math.e, w)\n","feature_importance = feature_importance.sort_values(by = [\"Importance\"], ascending=False)\n","    \n","print(\"Intercept:\", model.intercept_[0])\n","print(feature_importance)\n","print('\\n')\n","\n","ax = feature_importance.plot.barh(x='Feature', y='Importance')\n","plt.show()"],"metadata":{"id":"QA2xbz2ZZXH2","executionInfo":{"status":"ok","timestamp":1671590359216,"user_tz":300,"elapsed":644,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/","height":950},"outputId":"523b0607-3f22-4f90-f62e-30b6cf187259"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Imbalanced Model\n","----------------\n","Intercept: 15.681924549696346\n","                 Feature      Coef  Importance\n","3            haemorrhage  5.452191  233.268802\n","2              ocupation  3.810102   45.155052\n","24             eloquence  3.421546   30.616699\n","5               seizures  2.794921   16.361333\n","21              side_avm  2.595646   13.405244\n","17     arterial_aneurysm  2.549134   12.796023\n","23  type_venous_drainage  1.680864    5.370194\n","30       radiation_dosis  0.613244    1.846412\n","28    num_radiosurgeries  0.000000    1.000000\n","1                    age  0.000000    1.000000\n","13     prev_cran_surgery  0.000000    1.000000\n","19  num_afferent_vessels  0.000000    1.000000\n","20             depth_avm  0.000000    1.000000\n","8                deficit  0.000000    1.000000\n","7         other_diseases  0.000000    1.000000\n","4               headache  0.000000    1.000000\n","9        karnofsky_scale  0.000000    1.000000\n","18       dolichoectasia  -0.430989    0.649866\n","16       venous_aneurysm -1.233949    0.291141\n","10    glasgow_coma_scale -1.532144    0.216072\n","0                 gender -2.214030    0.109259\n","15      localization_avm -2.220599    0.108544\n","14          embolization -3.635433    0.026373\n","26       venous_stenosis -4.316001    0.013353\n","6       encephalomalacia -4.878988    0.007605\n","11         buffalo_scale -5.449440    0.004299\n","31              isodosis -5.779350    0.003091\n","12        virginia_scale -5.788281    0.003063\n","29        num_isocenters -6.597996    0.001363\n","25   blood_flow_velocity -7.249803    0.000710\n","22   expansion_shape_avm -8.659583    0.000173\n","27           volumen_avm -9.023428    0.000121\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["print('\\nBalanced Model')\n","print('----------------')\n","w = model_bal.coef_[0]\n","feature_importance = pd.DataFrame(X.columns, columns = [\"Feature\"])\n","feature_importance[\"Coef\"] = w\n","feature_importance[\"Importance\"] = pow(math.e, w) #Odds ratio e^B\n","feature_importance = feature_importance.sort_values(by = [\"Importance\"], ascending=False)\n","\n","print(\"Intercept:\", model.intercept_[0])\n","print(feature_importance)\n","print('\\n')\n","plt.figure(figsize=(500,800))\n","ax = feature_importance.plot.barh(x='Feature', y='Importance')\n","plt.show()"],"metadata":{"id":"wXt0WVZ1cKax","executionInfo":{"status":"ok","timestamp":1671590360172,"user_tz":300,"elapsed":988,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/","height":967},"outputId":"821ed7da-f63a-4131-bed5-d7b411de3962"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Balanced Model\n","----------------\n","Intercept: 15.681924549696346\n","                 Feature       Coef    Importance\n","21              side_avm   3.685394  3.986084e+01\n","2              ocupation   3.684293  3.981696e+01\n","3            haemorrhage   3.612294  3.705096e+01\n","13     prev_cran_surgery   2.809908  1.660839e+01\n","23  type_venous_drainage   2.122742  8.354012e+00\n","8                deficit   1.009382  2.743904e+00\n","24             eloquence   0.977819  2.658651e+00\n","0                 gender   0.477996  1.612839e+00\n","5               seizures   0.427576  1.533536e+00\n","9        karnofsky_scale   0.000000  1.000000e+00\n","12        virginia_scale   0.000000  1.000000e+00\n","29        num_isocenters   0.000000  1.000000e+00\n","28    num_radiosurgeries   0.000000  1.000000e+00\n","17     arterial_aneurysm   0.000000  1.000000e+00\n","4               headache  -0.010291  9.897622e-01\n","10    glasgow_coma_scale  -0.063201  9.387549e-01\n","11         buffalo_scale  -0.593961  5.521360e-01\n","26       venous_stenosis  -1.082555  3.387290e-01\n","30       radiation_dosis  -1.114669  3.280240e-01\n","19  num_afferent_vessels  -1.227075  2.931488e-01\n","7         other_diseases  -1.294874  2.739323e-01\n","16       venous_aneurysm  -1.341657  2.614121e-01\n","1                    age  -2.233286  1.071757e-01\n","6       encephalomalacia  -3.069712  4.643451e-02\n","15      localization_avm  -3.108126  4.468462e-02\n","20             depth_avm  -3.231191  3.951041e-02\n","22   expansion_shape_avm  -4.010097  1.813164e-02\n","31              isodosis  -4.730437  8.822614e-03\n","14          embolization  -4.738869  8.748537e-03\n","18       dolichoectasia   -5.665930  3.461928e-03\n","25   blood_flow_velocity  -7.407565  6.066463e-04\n","27           volumen_avm -21.466891  4.753876e-10\n","\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 36000x57600 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## **Final Results:**"],"metadata":{"id":"RKsF0U-ecbav"}},{"cell_type":"code","source":["final_report = pd.DataFrame(FINAL_REPORT_METRICS, columns=FINAL_REPORT_METRICS_TITLE)\n","final_report.to_csv(\"/\".join([OUTPUT_FOLDER,'results', MODEL_NAME + '_results_' + DT_STRING + '.csv']), index=False) \n","final_report "],"metadata":{"id":"zlvj0WkRcibK","executionInfo":{"status":"ok","timestamp":1671590360174,"user_tz":300,"elapsed":11,"user":{"displayName":"Mirko J. Rodríguez Mallma","userId":"00922684507243278814"}},"colab":{"base_uri":"https://localhost:8080/","height":175},"outputId":"2de3383f-b0e9-4ae6-db49-724d3d04f312"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                       Model Name   Info Accuracy Sensitivity/Recall  \\\n","0  Logistic-Regression Imbalanced  TRAIN   0.9669             0.9600   \n","1    Logistic-Regression Balanced  TRAIN   0.9640             0.9680   \n","2  Logistic-Regression Imbalanced   TEST   0.8431             0.8571   \n","3   Logistic-Regression Balanced    TEST   0.9216             0.9286   \n","\n","  Specificity     PPV     NPV Balanced_accuracy      F1     AUC   TN  FP  FN  \\\n","0      1.0000  1.0000  0.8387            0.9800  0.9796  0.9923   26   0   5   \n","1      0.9600  0.9603  0.9677            0.9640  0.9641   0.991  120   5   4   \n","2      0.7778  0.9474  0.5385            0.8175  0.9000  0.9444    7   2   6   \n","3      0.8889  0.9750  0.7273            0.9087  0.9512  0.9762    8   1   3   \n","\n","    TP  \n","0  120  \n","1  121  \n","2   36  \n","3   39  "],"text/html":["\n","  <div id=\"df-2babd774-528f-407d-8448-6aec61766ec3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model Name</th>\n","      <th>Info</th>\n","      <th>Accuracy</th>\n","      <th>Sensitivity/Recall</th>\n","      <th>Specificity</th>\n","      <th>PPV</th>\n","      <th>NPV</th>\n","      <th>Balanced_accuracy</th>\n","      <th>F1</th>\n","      <th>AUC</th>\n","      <th>TN</th>\n","      <th>FP</th>\n","      <th>FN</th>\n","      <th>TP</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Logistic-Regression Imbalanced</td>\n","      <td>TRAIN</td>\n","      <td>0.9669</td>\n","      <td>0.9600</td>\n","      <td>1.0000</td>\n","      <td>1.0000</td>\n","      <td>0.8387</td>\n","      <td>0.9800</td>\n","      <td>0.9796</td>\n","      <td>0.9923</td>\n","      <td>26</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>120</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Logistic-Regression Balanced</td>\n","      <td>TRAIN</td>\n","      <td>0.9640</td>\n","      <td>0.9680</td>\n","      <td>0.9600</td>\n","      <td>0.9603</td>\n","      <td>0.9677</td>\n","      <td>0.9640</td>\n","      <td>0.9641</td>\n","      <td>0.991</td>\n","      <td>120</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>121</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Logistic-Regression Imbalanced</td>\n","      <td>TEST</td>\n","      <td>0.8431</td>\n","      <td>0.8571</td>\n","      <td>0.7778</td>\n","      <td>0.9474</td>\n","      <td>0.5385</td>\n","      <td>0.8175</td>\n","      <td>0.9000</td>\n","      <td>0.9444</td>\n","      <td>7</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>36</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Logistic-Regression Balanced</td>\n","      <td>TEST</td>\n","      <td>0.9216</td>\n","      <td>0.9286</td>\n","      <td>0.8889</td>\n","      <td>0.9750</td>\n","      <td>0.7273</td>\n","      <td>0.9087</td>\n","      <td>0.9512</td>\n","      <td>0.9762</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>39</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2babd774-528f-407d-8448-6aec61766ec3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2babd774-528f-407d-8448-6aec61766ec3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2babd774-528f-407d-8448-6aec61766ec3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":[],"metadata":{"id":"ESWWlgQgHN-i"},"execution_count":null,"outputs":[]}]}